---
# morpheus is now running on nixOS
# the only configuration that should be present here is the
# docker-compose role generator container definitions

ntp_timezone: "America/New_York"

# ironicbadger.docker_compose_generator
appdata_path: /mnt/appdata
download_path: /mnt/downloads
storage_path: /mnt/jbod
bigrust18_path: /mnt/bigrust18
wd_domain_me: "wd.{{ domain_me }}"
m_wd_domain_me: "m.{{ wd_domain_me }}"

docker_compose_generator_uid: "1000"
docker_compose_generator_gid: "100"
global_env_vars:
  - "PUID={{ docker_compose_generator_uid }}"
  - "PGID={{ docker_compose_generator_gid }}"
  - "TZ={{ ntp_timezone }}"

containers:
  ### Administrative
  ###
  - service_name: tr
    active: true
    image: traefik
    container_name: tr
    labels:
      - traefik.enable=false
    ports:
      - 80:80
      - 443:443
    command:
      - --log.level=info
      - --accesslog=false
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certresolver=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge=true
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - "--certificatesresolvers.cloudflare.acme.email={{ cloudflare_account_email }}"
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      - --serversTransport.insecureSkipVerify=true
    volumes:
      - "{{ appdata_path }}/apps/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - "CLOUDFLARE_EMAIL={{ cloudflare_account_email }}"
      - "CLOUDFLARE_API_KEY={{ cloudflare_api_key }}"
    restart: unless-stopped
  ### Media Servers
  ###
  - service_name: jellyfin
    active: true
    image: jellyfin/jellyfin
    hostname: us-rdu
    devices:
      - /dev/dri:/dev/dri
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jellyfin.rule=Host(`jf.{{ wd_domain_me }}`)"
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    ports:
      - 2285:8096
    volumes:
      - "{{ appdata_path }}/mediaservers/jellyfin:/config"
      - "{{ storage_path }}:/data:ro"
      - "{{ bigrust18_path }}/media:/bigrust18/media:ro"
      - "/mnt/downloads:/downloads:ro"
      # ram transcode
      - /dev/shm:/transcode
    environment:
      - "JELLYFIN_PublishedServerUrl=jf.{{ wd_domain_me }}"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: plex
    active: true
    image: plexinc/pms-docker
    network_mode: host
    labels:
      - traefik.enable=false
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - "{{ appdata_path }}/mediaservers/plex/config:/config"
      - "{{ storage_path }}:/data:ro"
      - "{{ bigrust18_path }}/media:/bigrust18/media:ro"
      - "/mnt/downloads:/downloads:ro"
      # ram transcode
      - /dev/shm:/transcode"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: abs
    active: true
    image: advplyr/audiobookshelf
    labels:
      - traefik.enable=true
      - "traefik.http.routers.audiobookshelf.rule=Host(`abs.{{ wd_domain_me }}`)"
    ports: # shared via caddy and tailscale
      - 2284:80
    volumes:
      - "{{ bigrust18_path }}/media/audiobooks/library:/audiobooks:ro"
      - "{{ bigrust18_path }}/media/audiobooks/library2:/audiobooks2:ro"
      - "{{ bigrust18_path }}/media/audiobooks/podcasts:/podcasts"
      - "{{ appdata_path }}/mediaservers/audiobookshelf/metadata:/metadata"
      - "{{ appdata_path }}/mediaservers/audiobookshelf/config:/config"
    restart: unless-stopped

  ### Media Apps
  ###
  ###
  - service_name: prowlarr
    active: true
    image: lscr.io/linuxserver/prowlarr:develop
    labels:
      - traefik.enable=true
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.{{ m_wd_domain_me }}`)"
    volumes:
      - "{{ appdata_path }}/arrmatey/prowlarr:/config"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: sabnzbd
    active: true
    image: lscr.io/linuxserver/sabnzbd
    volumes:
      - "{{ appdata_path }}/arrmatey/sabnzbd:/config"
      - "{{ download_path }}:/downloads"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.{{ m_wd_domain_me }}`)"
    depends_on:
      - prowlarr
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: sonarr
    active: true
    image: lscr.io/linuxserver/sonarr
    depends_on:
      - sabnzbd
      - prowlarr
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.{{ m_wd_domain_me }}`)"
    volumes:
      - "{{ appdata_path }}/arrmatey/sonarr:/config"
      - "{{ download_path }}/complete/tv:/downloads/complete/tv"
      - /mnt/jbod/tv:/tv
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: radarr
    active: true
    image: lscr.io/linuxserver/radarr
    depends_on:
      - sabnzbd
    volumes:
      - "{{ appdata_path }}/arrmatey/radarr:/config"
      - "{{ download_path }}/complete/movies:/downloads/complete/movies"
      - /mnt/jbod/movies:/movies
    labels:
      - traefik.enable=true
      - "traefik.http.routers.radarr.rule=Host(`radarr.{{ m_wd_domain_me }}`)"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: lidarr
    active: true
    image: lscr.io/linuxserver/lidarr
    depends_on:
      - sabnzbd
    volumes:
      - "{{ appdata_path }}/arrmatey/lidarr:/config"
      - "{{ download_path }}/complete/music:/downloads/complete/music"
      - "{{ download_path }}/intermediate/music:/downloads-amd"
      - /mnt/bigrust18/media/music/flac:/music
    labels:
      - traefik.enable=true
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.{{ m_wd_domain_me }}`)"
    restart: unless-stopped
    include_global_env_vars: true
  ###
  - service_name: jellyseerr
    active: true
    image: fallenbagel/jellyseerr:latest
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jellyseerr.rule=Host(`jellyseerr.{{ m_wd_domain_me }}`)"
      #- traefik.http.services.jellyseerr.loadbalancer.server.port=5055
    volumes:
      - "{{ appdata_path }}/arrmatey/jellyseerr:/app/config"
    restart: unless-stopped
  ###
  - service_name: ersatztv
    active: true
    image: jasongdove/ersatztv:latest-vaapi
    labels:
      - traefik.enable=true
      - "traefik.http.routers.ersatz.rule=Host(`ersatz.{{ m_wd_domain_me }}`)"
    volumes:
      - "{{ appdata_path }}/mediaservers/ersatztv:/root/.local/share/ersatztv"
      - "/mnt/jbod:/mnt/jbod:ro"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: tubearchivist
    active: false
    image: bbilly1/tubearchivist
    labels:
      - traefik.enable=true
      - "traefik.http.routers.tubearchivist.rule=Host(`tube.{{ m_wd_domain_me }}`)"
    volumes:
      - /mnt/jbod/tv/youtube-dl:/youtube
      - /mnt/ssd4tb/yt-cache:/cache
    environment:
      - ES_URL=http://tubearchivist-elastic:9200
      - REDIS_HOST=tubearchivist-redis
      - "TA_HOST=tube.{{ m_wd_domain_me }}"
      - "TA_USERNAME={{ tubearchivist_user }}"
      - "TA_PASSWORD={{ tubearchivist_password }}"
      - "ELASTIC_PASSWORD={{ tubearchivist_elastic_password }}"
    include_global_env_vars: true
    depends_on:
      - tubearchivist-elastic
      - tubearchivist-redis
    restart: unless-stopped
  - service_name: tubearchivist-redis
    active: false
    image: redis/redis-stack-server
    volumes:
      - "{{ appdata_path }}/apps/tubearchivist/redis:/data"
    restart: unless-stopped
  - service_name: tubearchivist-elastic
    active: false
    image: bbilly1/tubearchivist-es
    environment:
      - "ELASTIC_PASSWORD={{ tubearchivist_elastic_password }}"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=true"
      - "discovery.type=single-node"
      - "path.repo=/usr/share/elasticsearch/data/snapshot"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - "{{ appdata_path }}/apps/tubearchivist/elastic:/usr/share/elasticsearch/data"
    restart: unless-stopped
  ###
  - service_name: qbit
    active: true
    image: lscr.io/linuxserver/qbittorrent
    network_mode: service:gluetun
    volumes:
      - "{{ appdata_path }}/arrmatey/qbit:/config"
      - "/mnt/disks/disk4/bt-dls:/downloads"
    depends_on:
      - gluetun
    environment:
      - WEBUI_PORT=8080
    include_global_env_vars: true
    restart: unless-stopped
  - service_name: gluetun
    active: true
    image: qmcgaw/gluetun
    labels:
      - traefik.enable=true
      - "traefik.http.routers.gluetun.rule=Host(`qbit.{{ m_wd_domain_me }}`)"
      - traefik.http.services.gluetun.loadbalancer.server.port=8080
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - 8080:8080
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
    volumes:
      - "{{ appdata_path }}/arrmatey/gluetun:/gluetun"
    environment:
      - VPN_SERVICE_PROVIDER=privado
      - VPN_TYPE=openvpn
      - "OPENVPN_USER={{ gluetun_privado_username }}"
      - "OPENVPN_PASSWORD={{ gluetun_privado_password }}"
    include_global_env_vars: true
    restart: unless-stopped

  ### Monitoring and Tools
  ###
  - service_name: smokeping
    active: true
    image: lscr.io/linuxserver/smokeping
    hostname: morpheus
    volumes:
      - "{{ appdata_path }}/apps/smokeping/config:/config"
      - "{{ appdata_path }}/apps/smokeping/data:/data"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.smokeping.rule=Host(`smokeping.{{ m_wd_domain_me }}`)"
    include_global_env_vars: true
    restart: unless-stopped
  ###
  - service_name: librespeed
    active: true
    image: lscr.io/linuxserver/librespeed
    labels:
      - traefik.enable=false
    ports:
      - 8008:80
    environment:
      - MODE=standalone
    restart: unless-stopped
